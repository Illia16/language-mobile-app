{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "GetTableLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/language-app-get-item"
      }
    },
    "PostItemLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/language-app-post-item"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com",
                  "edgelambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "cf-language-app",
                  "prod",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/language-app-get-item:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/language-app-post-item:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/language-app-get-item:*:*"
                    },
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/language-app-post-item:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "Table",
                        "Arn"
                      ]
                    }
                  ],
                  "Action": [
                    "dynamodb:Scan",
                    "dynamodb:PutItem",
                    "dynamodb:GetItem"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "cf-language-app",
              "prod",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "GetTableLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-deployment-bucket-illia-us-east-1",
          "S3Key": "serverless/cf-language-app/prod/1643337225900-2022-01-28T02:33:45.900Z/cf-language-app.zip"
        },
        "Handler": "api/getItem/index.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "language-app-get-item",
        "MemorySize": 128,
        "Timeout": 5,
        "Description": "get item from the dynamodb table",
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetTableLogGroup"
      ]
    },
    "PostItemLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-deployment-bucket-illia-us-east-1",
          "S3Key": "serverless/cf-language-app/prod/1643337225900-2022-01-28T02:33:45.900Z/cf-language-app.zip"
        },
        "Handler": "api/postItem/index.handler",
        "Runtime": "nodejs14.x",
        "FunctionName": "language-app-post-item",
        "MemorySize": 128,
        "Timeout": 5,
        "Description": "post item to the dynamodb table",
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "PostItemLogGroup"
      ]
    },
    "GetTableLambdaVersionHAnOb3q7JLxp9ovshXqKrzbeTOkMJR88mx6gM5gEE": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetTableLambdaFunction"
        },
        "CodeSha256": "hVp2boIiyngWJ2svjEmUfEm+HWPpKgUxLwn/s+YVAeQ=",
        "Description": "get item from the dynamodb table"
      }
    },
    "PostItemLambdaVersionEzdd0c2TkUB0fKyCqXD3jFnjGiNFDow6XQIRLKEGXQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "PostItemLambdaFunction"
        },
        "CodeSha256": "hVp2boIiyngWJ2svjEmUfEm+HWPpKgUxLwn/s+YVAeQ=",
        "Description": "post item to the dynamodb table"
      }
    },
    "ApiGatewayResourceApi": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "LanguageAppApiGW",
            "RootResourceId"
          ]
        },
        "PathPart": "api",
        "RestApiId": {
          "Ref": "LanguageAppApiGW"
        }
      }
    },
    "ApiGatewayResourceApiGetitem": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "getItem",
        "RestApiId": {
          "Ref": "LanguageAppApiGW"
        }
      }
    },
    "ApiGatewayResourceApiPostitem": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceApi"
        },
        "PathPart": "postItem",
        "RestApiId": {
          "Ref": "LanguageAppApiGW"
        }
      }
    },
    "ApiGatewayMethodApiGetitemOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiGetitem"
        },
        "RestApiId": {
          "Ref": "LanguageAppApiGW"
        }
      }
    },
    "ApiGatewayMethodApiPostitemOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiPostitem"
        },
        "RestApiId": {
          "Ref": "LanguageAppApiGW"
        }
      }
    },
    "ApiGatewayMethodApiGetitemGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiGetitem"
        },
        "RestApiId": {
          "Ref": "LanguageAppApiGW"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetTableLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetTableLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodApiPostitemPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceApiPostitem"
        },
        "RestApiId": {
          "Ref": "LanguageAppApiGW"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "PostItemLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "PostItemLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1643337221696": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "LanguageAppApiGW"
        },
        "StageName": "prod"
      },
      "DependsOn": [
        "ApiGatewayMethodApiGetitemOptions",
        "ApiGatewayMethodApiPostitemOptions",
        "ApiGatewayMethodApiGetitemGet",
        "ApiGatewayMethodApiPostitemPost"
      ]
    },
    "GetTableLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetTableLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "LanguageAppApiGW"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "PostItemLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "PostItemLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "LanguageAppApiGW"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "LanguageAppApiGW": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "languageAppApiwGW"
      }
    },
    "Table": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "PointInTimeRecoverySpecification": {
          "PointInTimeRecoveryEnabled": true
        },
        "ProvisionedThroughput": {
          "ReadCapacityUnits": "5",
          "WriteCapacityUnits": "5"
        },
        "TableName": "languageAppIn",
        "StreamSpecification": {
          "StreamViewType": "NEW_IMAGE"
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-deployment-bucket-illia-us-east-1",
      "Export": {
        "Name": "sls-cf-language-app-prod-ServerlessDeploymentBucketName"
      }
    },
    "GetTableLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetTableLambdaVersionHAnOb3q7JLxp9ovshXqKrzbeTOkMJR88mx6gM5gEE"
      },
      "Export": {
        "Name": "sls-cf-language-app-prod-GetTableLambdaFunctionQualifiedArn"
      }
    },
    "PostItemLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "PostItemLambdaVersionEzdd0c2TkUB0fKyCqXD3jFnjGiNFDow6XQIRLKEGXQ"
      },
      "Export": {
        "Name": "sls-cf-language-app-prod-PostItemLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "LanguageAppApiGW"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/prod"
          ]
        ]
      },
      "Export": {
        "Name": "sls-cf-language-app-prod-ServiceEndpoint"
      }
    },
    "apiGatewayRestApiId": {
      "Value": {
        "Ref": "LanguageAppApiGW"
      },
      "Export": {
        "Name": "languageAppRestApiId"
      }
    },
    "apiGatewayRestApiRootResourceId": {
      "Value": {
        "Fn::GetAtt": [
          "LanguageAppApiGW",
          "RootResourceId"
        ]
      },
      "Export": {
        "Name": "languageAppApiRootId"
      }
    },
    "TableArn": {
      "Description": "The ARN for the Table",
      "Value": {
        "Fn::GetAtt": [
          "Table",
          "Arn"
        ]
      },
      "Export": {
        "Name": "dynamodb-language-app-table"
      }
    },
    "StreamArn": {
      "Description": "The ARN for the Event Stream",
      "Value": {
        "Fn::GetAtt": [
          "Table",
          "StreamArn"
        ]
      },
      "Export": {
        "Name": "dynamodb-language-app-stream"
      }
    }
  }
}